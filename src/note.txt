1. Khoi tao project node js
npm init

- Tao file src/index.js
    const express = require('express');
    const app = express();
    const port = 3000;

    app.get('/', (req, res) => {
        res.send('Homepage');
    })

    app.listen(port, () => {
        console.log(`Example app listening at http://localhost:${port}`)
    })

2. cai dat cac package can thiet

    npm install --save express

- Cai dat package vao devDependencies
    npm install --save-dev nodemon 
        Sau khi cai dat nodemon thi can sua lai file package.json de nhan nodemon 
            start": "nodemon --inspect src/index.js"
        Khoi dong server: 
            npm run start    
    npm install --save-dev morgan
        Sau khi cai morgan thi can them vao file src/index.js
        const morgan = require('morgan');
        ...
        // HTTP logger
        app.use(morgan('combined'));
 
        Sau moi request thi http log se duoc show ra de debug 

    Cac packages nam trong devDependencies se khong duoc su dung tren moi truong production => giam source, toi uu hieu nang
    => cac packages chi phuc vu trong qua trinh dev => chi nen cai vao devDependencies

3. Cai dat va su dung template engine (handlebars)
https://handlebarsjs.com/guide/#what-is-handlebars
    npm install --save express-handlebars

    - sua file src/index.js 
        const { engine } = require('express-handlebars');

        // Template engine (extname: 'hbs': doi dinh dang file tu handlebars thanh hbs)
        app.engine('hbs', engine({extname: 'hbs'}));
        app.set('view engine', 'hbs');
        app.set('views', path.join(__dirname, 'resources/views'));

    - Sua file src/index.js va them vao route /home
        app.get('/home', (req, res) => {
            res.render('home');     // Tim den file resources/views/home.hbs
        })
    - Tao folder resources/views
        Tao file home.hbs chua noi dung phan content (body) cho trang homepage
    - Tao layout cho engine trong thu muc resources/views/layouts
        Tao file main.hbs
            <!DOCTYPE html>
                <html lang="en">

                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Document</title>
                </head>

                <body>
                    <div class="app">
                    <!-- nap partial layout header tu src/resources/views/partials -->
                        {{>header}}
                        <div class="container">
                        <!-- Noi dung file home.hbs se duoc chen vao phan body nay -->
                            {{{body}}}
                        </div>
                        <!-- nap partial layout header tu src/resources/views/partials -->
                        {{>footer}}
                    </div>
                </body>

                </html>
    - partials: 
        - footer.hbs
        - header.hbs
    
    **** Note:
        Mac dinh neu ko truyen layout vao ham render thi template engine se tim layout main de render. 
        Neu muon dung layout khac cho tung trang can truyen them layout vao
        /** route */
        // Dung layout home cho trang homepage
        app.get('/', (req, res) => {
            res.render('home', { layout: 'home' });
        })

        // Khong khai bao gi mac dinh dung layout main. Neu ko co thi se bao loi
        app.get('/news', (req, res) => {
            res.render('news')
        })

    - Ngoai ra co the truyen data, helpers, ... vao template engine de dieu khien cung nhu hien thi du lieu dong

4. Static file and SCSS
4. 1. Khai bao static files - noi chua cac file static nhu anh, ....
    trong file src/index.js them dong sau: 
    app.use(express.static(path.join(__dirname, 'public')))
    khi do vao url go: http://localhost:3000/imgs/logo.png se show ra anh
    blog\src\public\imgs\logo.png

4.2 SCSS
    cai dat scss vao devDependencies de su dung trong qua trinh dev, con len production thi no se duoc compile sang class
    npm install --save-dev node-sass

    cac file scss se duoc de trong thu muc resources/scss 
    - tao file app.scss

    Tuy nhien website se khong doc duoc file scss the nen can phai convert sang file css va de trong src/public/css.
    - Cau hinh de sau khi chay lenh thi se conver tu file scss sang file css 
        + them dong nay vao file package.json
        "watch": "node-sass --watch src/resources/scss/ --output src/public/css/",
        Sau do chay lenh: npm run watch: thi no se tu dong combile scss src/resources/scss/app.scss sang css src/public/css/app.css nhu trong config.
        tham so: --watch la de no tu dong combile cho den khi tat command di ma ko can chay lenh nhieu lan
    
    - Luu y: khong bao gio viet code thang vao src/public/css/app.css ma chi thay doi code trong 
    src/resources/scss/app.scss sau do combine sang file css

    - Sau do chi can link file css vao trong header cua layout la duoc
    <link rel="stylesheet" href="css/app.css">

    - Hoc them ve sass nhe
    VD: tao file src/resources/scss/_variables.scss de chua cac bien
    sau do import vao file src/resources/scss/app.scss 

5. Use Bootstrap 4
https://getbootstrap.com/docs/4.0/getting-started/introduction/
- add các file css và js vào file src/resources/views/layouts/home.hbs...
- Lưu ý: các file js không nên add vào thẻ head như css mà add vào cuối thẻ body (trước khi đóng thẻ body) để tối ưu hiệu năng.
có thể tìm hiểu thêm 1 số option: async, defer 
    + async: chỉ thị load file js không đồng bộ cùng với việc load html của trang
    + defer: chỉ thị load file js sau khi các mã html đã được load xong 

- Sử dụng các component của Bootstrap để hiển thị nội dung phù hợp.

6. Basic Routing
    https://expressjs.com/en/starter/basic-routing.html

7. Query Parameters
http://localhost:3000/search?q=toi%20dang%20search&page=2

- Lấy tham số từ url thì dùng: req.query
    req.query.q     // toi dang search
    req.query.page  // 2

8. POST METHOD
- Để lấy dữ liệu submit qua phương thức POST thì dùng req.body thay vì req.query như phương thức GET.
- do express đã hỗ trợ sẵn middleware để xử lý Query Parameters rồi nên khi console log query nó sẽ ra luôn dữ liệu console.log(req.query). Còn console.log(req.body) ra undefined vì express chưa hỗ trợ sẵn. 
=> cần khai báo bodyParser vào mới lấy được.
    // Cho phép lấy dữ liệu từ form post lên
    app.use(express.urlencoded({
        extended:true
    }));

    // Lấy dữ liệu từ client đẩy lên dạng json: XMLHttpRequest, fetch, axios, ajax, ... 
    app.use(express.json());

*** Note: Từ express 1.16 đã hỗ trợ sẵn body-parser rồi nên chỉ cần khai báo là được.
TH dùng express cũ hơn thì cần cài đặt package này mới dùng được.

9. MVC
9.1 routes
    - Tạo thư mục routes để chứa các route cho ứng dụng
    - Trong thư mục routes tạo file news.route để khai báo các route cho mục news
    - Tạo file index.js và import news.route vào
    - Nhớ export ra để file khác có thể gọi và sử dụng
***** Chú ý: 
        - route sẽ đọc từ trên xuống dưới. nếu để  / ở trên /:slug thì khi chạy nó sẽ đọc được / và chạy luôn thay vì chạy /:slug. Vì vậy cần phải để /:slug lên trước /
        - Đối với một số trang không nằm trong danh mục nào cả (VD: homepage, search, contact,...) thì tạo cho nó 1 route riêng  (site.route)


9.2 app/controllers
    - Các controllers
    - Tạo file news.controller để khai báo các controller cho mục news
    - Có thể khai báo class hoặc là function riêng lẻ
    - Nhớ export ra để router còn sử dụng

9.3 Sử lại file src/index.js để  gọi đến router
const route = require('./routes');
...
route(app);
- comment các  routes đã test trước đó

10. Prettier - lint-staged - husky
    Install vào devDependencies
        npm install --save-dev prettier lint-staged husky
10.1 Prettier
    https://github.com/prettier/prettier
    - Đối với javascript thì có package prettier cho phép tự động format lại code cho đẹp hơn
    - Kết hợp với 2 package khác là lint-staged và husky cho phép format code trước khi commit code lên git theo tieu chuan chung 
    - Có the cấu hình để thay đổi tiêu chuẩn của prettier  nếu muốn nhưng ko recommend
    - Thêm cấu hình vào file package.json
        "format": "prettier --single-quote --trailing-comma all --tab-width 4 --write 'src/**/*.{js,json,scss}'"
        Xem thêm config format code trên trang chủ
    - Sau đó mỗi lần muốn format thì chạy lệnh: 
        npm run format 
    - Nếu cấu hình lint-staged thì đổi lại config trong script như sau: 
        "format": "lint-staged"

10.2 lint-staged
    cho phép chạy một command trên những files đã được add vào git ( đã được git staged)
    - Add code vào file package.json    
        {
            "lint-staged": {
                '*': "your-cmd" 
            }
        }
    - sửa lại phần script của format để gọi đến lint-staged
        "format": "lint-staged"
    - Sau khi gọi git add và chạy npm run format thì nó sẽ tự reformat

10.3. husky 
    Cung cấp cho chúng ta những cái hooks để bắt những hành vi (action) của git (commit,...)
    - Như ở trên, sau khi gọi git add rồi vẫn phải chạy lệnh manually npm run format. 
    Bây giờ sử dụng huskey để tự động reformat after chạy lệnh git commit.
    - Thêm cấu hình husky vào file package.json
        "husky": {
            "hooks": {
                "pre-commit": "lint-staged"
            }
        },

11. Xây dưng model cho ứng dụng
- Mở Mongodb Compass và connect to Mongodb
- Tạo database f8_edu_dev, collection: courses
- Mongodb không phải là hệ cơ sở dữ liệu quan hệ, nó là document database. Lưu trữ dữ liệu dưới dạng tài liệu
    Collection tương ứng table,
    document tương ứng với record
- Trong collection thi cau truc cac document co the khac nhau chu khong co dinh nhu trong mysql. 
VD: document 1: {name: name1, description: description1}
document 2: {name: name2, description: description2, title: title2}
    
11.1 Install thư viện mongoose 
    https://github.com/Automattic/mongoose
    npm install --save mongoose
11.2 Connect to Mongodb server
    - xem file config/db/index.js
    const mongoose = require('mongoose');

    async function connect() {
        try {
            await mongoose.connect('mongodb://127.0.0.1:27017/f8_edu_dev');
        } catch (e) {}
    }
Nho export module
    module.exports = {connect}    
11.3 Xây dựng model (defining a model)
    - xem file models/courses.model.js

    const mongoose = require('mongoose');
    const schema = mongoose.schema;    

    const Course = new schema({
        name: { type: String, minLenth: 3, maxLength: 160, required: true },
    description: { type: String, default: '', maxLength: 600, required: false },
    image: { type: String, default: '', required: false },
    createdAt: { type: Date, default: new Date() },
    updatedAt: { type: Date, default: new Date() },
    })

module.exports = mongoose.model('Course', Course);

11.4. Accessing a Model (lay list du lieu)
    - xem file app/controllers/sites.controller
    const CourseModel = require('../models/course.model');

    async getHomePage(req, res, next) {
        // Get list of courses
        const CourseModel = await CourseModel.find({});

        // Get course by index
        const instance = await CourseModel.findOne({ });
        .......
    }

12. Restructure code and install JSON viewer
12.1 JSON viewer
Cai chrome extension de view json. Cai cung duoc ma khong cai cung khong sao.
Minh ko cai cho do nang chrome

12.2 Route METHOD
    - Trong file routes/index.js thi su dung app.use()
    - Con cac file routes khac (news.route, sites.route) thi dung phuong thuc xac dinh luon
    VD: app.get()
        app.post()

12.3 Resource Path
    ham path.join() co the nhan nhieu doi so de join vao voi nhau
    => thay vi viet path.join(__dirname, 'resources/views') (co dinh / cho window. nhung linux lai la \) 
    thi ta dung: path.join(__dirname, 'resources', 'views'). Nhu vay thi path no se tu dung dau / phu hop voi linux va window

13. CURD from Database
13.1: Read and render a list courses in the homepage
- study synctax to render a list of handlebars template in https://handlebarsjs.com/guide/#block-helpers
- from handlebars v4.6.x, you cannot access to the attributes of the object directly from controller. 
VD: {{#each courses}}
    {{this.name}}
{{/each}}
- To fix this problem, you need to process the data from mongoose before render 
    + write function to process data from mongoose in util/mongoose.js
        const processMongooseListToObject = (mongooseArray) => {
            return mongooseArray.map(item => item.toObject());
        }

        const processMongooseDetailToObject = (mongooseDetail) => {
            return mongooseDetail.toObject();
        }

        module.exports = {
            processMongooseListToObject,
            processMongooseDetailToObject
        }
    + call the function before render
        const utilMongoose = require('../../util/mongoose');
        ...
        courses = utilMongoose.processMongooseListToObject(courses);
        res.render('home', { layout: 'home', coursesData: courses });